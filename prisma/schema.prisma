// Prisma schema for Monet MVP (PostgreSQL)
generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["views"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  CANDIDATE
  ADMIN
  PROFESSIONAL
}

enum BookingStatus {
  draft
  requested
  accepted
  cancelled
  completed
  completed_pending_feedback
  refunded
}

enum PaymentStatus {
  held
  released
  refunded
}

enum PayoutStatus {
  pending
  paid
  blocked
}

enum QCStatus {
  passed
  revise
  failed
  missing
}

model User {
  id                      String   @id @default(cuid())
  email                   String   @unique
  hashedPassword          String?
  role                    Role
  googleCalendarConnected Boolean  @default(false)
  linkedinConnected       Boolean  @default(false)
  corporateEmailVerified  Boolean  @default(false)
  flags                   Json     @default("{}")
  firstName               String?
  lastName                String?
  stripeCustomerId        String?
  stripeAccountId         String?
  createdAt               DateTime @default(now())
  updatedAt               DateTime @updatedAt

  professionalProfile    ProfessionalProfile?
  candidateProfile       CandidateProfile?
  accounts               OAuthAccount[]
  bookingsAsCandidate    Booking[]            @relation("CandidateBookings")
  bookingsAsProfessional Booking[]            @relation("ProfessionalBookings")
  notifications          Notification[]
  auditLogs              AuditLog[]           @relation("AuditActor")
  availabilities         Availability[]

  @@index([role])
}

model OAuthAccount {
  id                String    @id @default(cuid())
  userId            String
  provider          String // 'google' | 'linkedin'
  providerAccountId String
  accessToken       String?
  refreshToken      String?
  expiresAt         DateTime?
  scope             String?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model ProfessionalProfile {
  userId            String       @id
  employer          String
  title             String
  bio               String
  priceUSD          Int
  availabilityPrefs Json         @default("{}")
  verifiedAt        DateTime?
  corporateEmail    String?
  experience        Experience[] @relation("ProfessionalExperience")
  education         Education[]  @relation("ProfessionalEducation")
  interests         String[]
  activities        String[]

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([employer])
  @@index([priceUSD])
}

model CandidateProfile {
  userId     String       @id
  resumeUrl  String?
  interests  String[]
  activities String[]
  experience Experience[] @relation("CandidateExperience")
  education  Education[]  @relation("CandidateEducation")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Experience {
  id             String               @id @default(cuid())
  firm           String
  title          String
  startDate      DateTime
  endDate        DateTime
  professional   ProfessionalProfile? @relation("ProfessionalExperience", fields: [professionalId], references: [userId], onDelete: Cascade)
  professionalId String?
  candidate      CandidateProfile?    @relation("CandidateExperience", fields: [candidateId], references: [userId], onDelete: Cascade)
  candidateId    String?
}

model Education {
  id             String               @id @default(cuid())
  school         String
  title          String
  startDate      DateTime
  endDate        DateTime
  professional   ProfessionalProfile? @relation("ProfessionalEducation", fields: [professionalId], references: [userId], onDelete: Cascade)
  professionalId String?
  candidate      CandidateProfile?    @relation("CandidateEducation", fields: [candidateId], references: [userId], onDelete: Cascade)
  candidateId    String?
}

model Booking {
  id               String        @id @default(cuid())
  candidateId      String
  professionalId   String
  status           BookingStatus
  startAt          DateTime
  endAt            DateTime
  priceUSD         Int?
  zoomMeetingId    String?
  zoomJoinUrl      String?
  calendarEventIds Json          @default("[]")
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt

  candidate          User                @relation("CandidateBookings", fields: [candidateId], references: [id])
  professional       User                @relation("ProfessionalBookings", fields: [professionalId], references: [id])
  payment            Payment?
  feedback           Feedback?
  professionalReview ProfessionalReview?
  payout             Payout?

  @@index([status, startAt])
  @@index([candidateId, startAt])
  @@index([professionalId, startAt])
}

model Payment {
  id           String        @id @default(cuid())
  bookingId    String        @unique
  amountGross  Int
  platformFee  Int
  escrowHoldId String
  status       PaymentStatus
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt

  booking Booking @relation(fields: [bookingId], references: [id], onDelete: Cascade)
}

model Feedback {
  bookingId            String   @id
  starsCategory1       Int
  starsCategory2       Int
  starsCategory3       Int
  extraCategoryRatings Json     @default("{}")
  wordCount            Int
  actions              String[]
  text                 String
  submittedAt          DateTime
  qcStatus             QCStatus
  qcReport             Json     @default("{}")

  booking Booking @relation(fields: [bookingId], references: [id], onDelete: Cascade)
}

model ProfessionalReview {
  bookingId   String   @id
  rating      Int
  text        String
  submittedAt DateTime @default(now())

  booking Booking @relation(fields: [bookingId], references: [id], onDelete: Cascade)
}

model Payout {
  id                 String       @id @default(cuid())
  bookingId          String       @unique
  proStripeAccountId String
  amountNet          Int
  status             PayoutStatus
  reason             String?
  createdAt          DateTime     @default(now())
  updatedAt          DateTime     @updatedAt

  booking Booking @relation(fields: [bookingId], references: [id], onDelete: Cascade)
}

model SuccessFeeInvoice {
  id                  String   @id @default(cuid())
  candidateId         String
  professionalId      String
  percentage          Int      @default(10)
  declaredBonusAmount Int
  invoiceAmount       Int
  status              String // 'draft'|'sent'|'paid'|'void'
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
}

model Verification {
  id             String    @id @default(cuid())
  userId         String
  corporateEmail String
  token          String
  verifiedAt     DateTime?
  createdAt      DateTime  @default(now())
}

model Notification {
  id           String    @id @default(cuid())
  userId       String
  type         String
  payload      Json      @default("{}")
  scheduledFor DateTime
  sentAt       DateTime?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([scheduledFor])
}

model Availability {
  id     String   @id @default(cuid())
  userId String
  start  DateTime
  end    DateTime
  busy   Boolean  @default(false)

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, start])
}

model AuditLog {
  id          String   @id @default(cuid())
  actorUserId String?
  entity      String
  entityId    String
  action      String
  metadata    Json     @default("{}")
  createdAt   DateTime @default(now())

  actor User? @relation("AuditActor", fields: [actorUserId], references: [id])
}

// Postgres view for listing cards
view ListingCardView {
  userId   String
  employer String
  title    String
  priceUSD Int
  tags     String[]

  @@ignore // Prisma doesn't manage view fields in client; created in migration SQL
}
